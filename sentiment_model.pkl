import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
import joblib

# Step 1: Load the Dataset
def load_data():
    return pd.read_csv('brookeside.csv')

# Step 2: Preprocess the Data
def preprocess_data(data):
    # Convert text to lowercase
    data['tweets'] = data['tweets'].str.lower()
    
    # Remove punctuation
    data['tweets'] = data['tweets'].apply(lambda x: x.translate(str.maketrans('', '', string.punctuation)))
    
    # Tokenization and removing stopwords
    stop_words = set(stopwords.words('english'))
    data['tweets'] = data['tweets'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))
    
    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    data['tweets'] = data['tweets'].apply(lambda x: ' '.join([lemmatizer.lemmatize(word) for word in x.split()]))
    
    return data

# Step 3: Split the Dataset
def split_data(data):
    X = data['tweets']
    y = data['Sentiment']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

# Step 4: Feature Engineering (TF-IDF)
def feature_engineering(X_train, X_test):
    tfidf_vectorizer = TfidfVectorizer(max_features=5000)
    X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
    X_test_tfidf = tfidf_vectorizer.transform(X_test)
    return X_train_tfidf, X_test_tfidf, tfidf_vectorizer

# Step 5: Train a Model (Naive Bayes)
def train_model(X_train, y_train):
    model = MultinomialNB()
    model.fit(X_train, y_train)
    return model

# Step 6: Evaluate the Model
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print("Model Accuracy:", accuracy)
    return accuracy

# Step 7: Save the Model
def save_model(model, filename='sentiment_model.pkl'):
    joblib.dump(model, filename)
    print("Model saved successfully as", filename)

def main():
    # Step 1: Load the Dataset
    data = load_data()
    
    # Step 2: Preprocess the Data
    data = preprocess_data(data)
    
    # Step 3: Split the Dataset
    X_train, X_test, y_train, y_test = split_data(data)
    
    # Step 4: Feature Engineering (TF-IDF)
    X_train_tfidf, X_test_tfidf, tfidf_vectorizer = feature_engineering(X_train, X_test)
    
    # Step 5: Train a Model (Naive Bayes)
    model = train_model(X_train_tfidf, y_train)
    
    # Step 6: Evaluate the Model
    accuracy = evaluate_model(model, X_test_tfidf, y_test)
    
    # Step 7: Save the Model
    save_model(model)

if __name__ == "__main__":
    main()
